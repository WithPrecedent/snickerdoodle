{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"snickerdoodle","text":"Status Documentation Compatibility"},{"location":"#what-is-snickerdoodle","title":"What is snickerdoodle?","text":"<p><code>snickerdoodle</code> is an easy-to-use, general-purpose <code>cookiecutter</code> template for Python projects utilizing modern tools and best practices. To see an demo repository using this template, check out <code>snickerdoodle_demo</code>.</p>"},{"location":"#why-use-snickerdoodle","title":"Why use snickerdoodle?","text":"<p>In contrast to highly-opinated templates, <code>snickerdoodle</code> has limited requirements with powerful options that users can opt into in the <code>cookiecutter</code> questionnaire. If you want <code>snickerdoodle</code> to support other options, please make a feature request or contribute.</p> <ul> <li>Requirements:</li> <li>Dependency Management: </li> <li>Linting: </li> <li>Testing:   </li> <li>Templater: </li> <li>Options Supported:</li> <li>Automated Hooks: </li> <li>Badge Styles:<ul> <li></li> <li></li> <li></li> <li></li> <li></li> </ul> </li> <li>CI/CD: </li> <li>Code Coverage:  (must have <code>codecov</code> installed on the named GitHub account)</li> <li>Dependency Updater: </li> <li>Documentation:    on    automatically built and deployed with every commit</li> <li>Publishing:<ul> <li>   with    using <code>publish.yml</code></li> <li> automatically with any commit beginning with a version number (e.g., \"0.2.3\")</li> </ul> </li> <li>Repository Initialization:      with an initial commit (must have GitHub Credential Manager installed with token access)</li> <li>Virtual Environment Creation: </li> </ul>"},{"location":"#getting-started","title":"Getting started","text":""},{"location":"#setup","title":"Setup","text":"<p>If you are new to <code>cookiecutter</code> or simply want to guarantee that the created repository works as intended, follow the instructions in the <code>snickerdoodle</code> tutorial.</p> <p>If you are familiar with <code>cookiecutter</code> templates, you can go about the normal construction process. However, if you do not select the optional automatic setup features in the questionnaire, you should follow the instructions for manually setting up your virtual environment and deploying your documentation in the <code>snickerdoodle</code> tutorial. It is especially important to follow the document deployment process for your initial deployment - after that GitHub Actions will automatically update and redeploy the documentation (and you need not use the manual process again).</p>"},{"location":"#usage","title":"Usage","text":"<p>After your repository is created, you can start coding right away. Every push to GitHub will run any tests in the \"tests\" folder, deploy documentation to GitHub Pages, and apply <code>ruff</code> for linting and formatting. For more information about the following topics, just click on the corresponding hyperlink.</p> <ul> <li>Formatting and Linting</li> <li>GitHub Actions</li> <li>Publishing</li> <li>Repository Layout</li> <li>Versioning</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributors are always welcome and should find <code>snickerdoodle</code> easy to work with. The template is highly documented so that users and developers can adapt or extend <code>snickerdoodle</code> to work with their projects. So, forking and creating different template spins is encouraged. If you want to contribute directly, feel free to grab an issue to work on or make a suggested improvement. If you wish to contribute, please read the Contribution Guide and Code of Conduct.</p>"},{"location":"#similar-projects","title":"Similar Projects","text":"<p>These are other <code>cookiecutter</code> templates using <code>uv</code> as their dependency manager:</p> <ul> <li>cookiecutter-uv-hypermodern-python:   an opinionated template that   uses, among other tools, <code>sphinx</code>, GitHub Actions, <code>nox</code>, <code>mypy</code>, <code>typeguard</code>,   Prettier, Click,   and <code>ruff</code>. If you do not mind those choices and wanted a modern, maintained   template, this is the one to use.</li> <li>cookiecutter-uv: uses <code>ruff</code>,   <code>mypy</code>, <code>tox</code>, <code>mkdocs</code>, and <code>deptry</code>.</li> <li>ultraviolet: a basic   template that requires Homebrew.</li> </ul>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>I'd also like to extend a special thanks to pawamoy whose excellent <code>mkdocs</code> extensions and utlities are incorporated into <code>snickerdoodle</code>. Some of the scripts, documentation, configuration files, and other CI code were all adapted from pawamoy's repositories.</p> <p>I would also like to thank the University of Kansas School of Law for tolerating and supporting this law professor's coding efforts, an endeavor which is well outside the typical scholarly activities in the discipline.</p>"},{"location":"#license","title":"License","text":""},{"location":"advanced/","title":"Advanced User Guide","text":""},{"location":"advanced/#configuration-file","title":"Configuration File","text":"<p>If you use <code>cookiecutter</code> a lot (or plan to do so), I suggest creating a configuration file with some answers to the questionnaire. For example, I have included a basic configuration file in this repository: <code>cc_config.yaml</code>. You can then use the configuration file (which you should probably put in the parent folder for your code repositories) when you call <code>cookiecutter</code> as follows:</p> <pre><code>cookiecutter gh:WithPrecedent/snickerdoodle --config-file cc_config.yaml\n</code></pre>"},{"location":"advanced/#core-components","title":"Core Components","text":"<p>These are the tools that <code>snickerdoodle</code> incorporates and a brief explanation as to why they were chosen:</p> <ul> <li><code>uv</code>: <code>uv</code> is PEP-compliant, incredibly fast,   and is quickly becoming   the leading Python dependency manager.</li> <li><code>mkdocs</code>: <code>sphinx</code> is the dominant documentation package, but it is not nearly as easy to use as <code>mkdocs</code>, which allows all of your documentation to be created in Markdown and is beautiful out-of-the-box when using the Material Theme. I chose to prioritize accessibility so that you do not waste time trying to properly format and design your documentation.</li> <li><code>ruff</code>: A relatively new player in formatting, it aims to serve as a one-stop, extremely fast (it's written in <code>Rust</code>) formatting and linting package. <code>snickerdoodle</code> implements some reasonable defaults while still allowing user flexibility (i.e., it does not implement <code>black</code>). By default, the template activates the parts of <code>ruff</code> that incorporate, among other packages: <code>Flake8</code>, <code>Bandit</code>, <code>pydocstyle</code>, and <code>pylint</code>.</li> <li>Github Actions: If you store your package on Github, which <code>snickerdoodle</code> assumes, there are strong reasons to prefer Github Actions as your CI/CD tool. <code>snickerdoodle</code> includes workflows for updating, releasing, and publishing your package while also deploying the accompanying documentation.</li> <li>GitHub Pages: There is a lot to be said for Read the Docs as a documentation host site. However, <code>mkdocs</code> works better on GitHub Pages and once you start using GitHub Actions, the automatic updating advantage of Read the Docs disappears. I also like that GitHub Pages is not dependent on ads placed on documentation pages for its survival. This was a close call and I might consider adding a Read the Docs option in a future version of <code>snickerdoodle</code>.</li> </ul>"},{"location":"advanced/#formatting-and-linting","title":"Formatting and Linting","text":"<p>All of the formatting and linting options of the created project are implemented through <code>ruff</code> and are incorporated into the created project's <code>pyproject.toml</code> file. So, you can adjust any <code>ruff</code> rules there. I have included comments in the <code>pyproject.toml</code> file for rules that are excluded and packages that are included so that you know which rules are enforced. <code>ruff</code> is automatically run with each GitHub push.</p> <p>Tip</p> <p>To automatically fix problems identified by <code>ruff</code>, you should use <code>pre-commit</code>. A <code>pre-commit</code> configuration file (<code>.pre-commit-config.yaml</code>) is included in the created repository.  By default, the <code>pre-commit</code> command will run <code>ruff</code> with the <code>fix</code> option invoked, which will try to correct all of the problems that it can. To use <code>pre-commit</code>, follow its user guide. If you activate <code>pre-commit</code>, it will then be automatically run on every push to GitHub.</p>"},{"location":"advanced/#github-actions","title":"GitHub Actions","text":"<p>These are the available actions for a repository created by <code>snickerdoodle</code> that are located in the \".github\" folder and on the GitHub repository page under \"Actions\":</p> GitHub Action Trigger Jobs <code>ci</code> automatically on push builds repo, runs tests, lints, formats, builds docs, and deploys docs <code>publish</code> another Action or manually on GitHub publishes repository on PyPI (must configure PyPI to accept as trusted publisher) <p>Tip</p> <p>To run an Action (other than <code>ci.yml</code>) on GitHub, go to your repository, click \"Actions\" and select one of the Actions listed on the left side of the screen.</p>"},{"location":"advanced/#publishing","title":"Publishing","text":"<p><code>snickerdoodle</code> tries to make publishing your repository as simple as possible. Out-of-the-box, it provides tools to publish a release on GitHub and PyPI.</p> on GitHubon PyPI <p>To post a release on GitHub, you just need to push a commit with a message that begins with the letter \"v\" followed by the version in semantic form (e.g. \"v0.1.2\"). That will trigger a job in the <code>ci.yml</code> Action which automatically publishes a release, using the CHANGELOG.md for any changes made since the last release.</p> <p>The best way to publish a release on PyPI is to make the <code>ci.yml</code> Action a trusted publisher. If you do that, you can just run the <code>publish</code> GitHub Action (which can be activated directly from your GitHub repository's Actions page). Otherwise, you should use the <code>uv publish</code> command from the command line while in the repository's root folder.</p>"},{"location":"advanced/#repository-layout","title":"Repository Layout","text":"<p>Consistent with best practices, <code>snickerdoodle</code> uses the \"src layout\" structure for the created repository. In the diagram below, the files and folders that you will ordinarily modify are commented.</p> <pre><code>\u251c\u2500\u2500 CHANGELOG.md              # Main changelog to record changes\n\u251c\u2500\u2500 CODE_OF_CONDUCT.md\n\u251c\u2500\u2500 CONTRIBUTING.md\n\u251c\u2500\u2500 docs\n\u2502   \u251c\u2500\u2500 advanced.md           # Add core documentation beyond the tutorial\n\u2502   \u251c\u2500\u2500 changelog.md\n\u2502   \u251c\u2500\u2500 code_of_conduct.md\n\u2502   \u251c\u2500\u2500 contributing.md\n\u2502   \u251c\u2500\u2500 credits.md\n\u2502   \u251c\u2500\u2500 css\n\u2502   \u2502   \u251c\u2500\u2500 material.css\n\u2502   \u2502   \u2514\u2500\u2500 mkdocstrings.css\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u251c\u2500\u2500 license.md\n\u2502   \u251c\u2500\u2500 recipes.md            # Add examples and recipes\n\u2502   \u251c\u2500\u2500 scripts\n\u2502   \u2502   \u251c\u2500\u2500 gen_credits.py\n\u2502   \u2502   \u2514\u2500\u2500 gen_ref_nav.py\n\u2502   \u2514\u2500\u2500 tutorial.md           # Add basic tutorial\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 mkdocs.yml                # Change documentation structure\n\u251c\u2500\u2500 pyproject.toml            # Add dependencies or project metadata\n\u251c\u2500\u2500 README.md                 # This will also be the docs landing page\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 {repository name}     # Add Python modules\n\u2502       \u2514\u2500\u2500 __init__.py       # Update import info and version\n\u2514\u2500\u2500 tests                     # Add other test files\n    \u2514\u2500\u2500 test_main.py          # Follow the 'test_NAME' convention\n</code></pre>"},{"location":"advanced/#versioning","title":"Versioning","text":"<p>At present, <code>snickerdoodle</code> does not support automatic semantic versioning because the tools think so many minor updates are \"major\" and you will find yourself on version 12.0.0 and still in alpha or beta. And, while calendar versioning has a lot in its favor, it is alien and confusing to users unfamiliar with it.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p>"},{"location":"changelog/#030-forthcoming","title":"0.3.0 (forthcoming)","text":"<ul> <li>Replaced <code>pdm</code> with <code>uv</code> for dependency management</li> </ul>"},{"location":"changelog/#022","title":"0.2.2","text":"<ul> <li>Fixed mkdocs extension bug in GitHub Actions</li> </ul>"},{"location":"changelog/#021","title":"0.2.1","text":"<ul> <li>Updated badge logos to incorporate changes at Simple Badges</li> </ul>"},{"location":"changelog/#020","title":"0.2.0","text":"<ul> <li>Removed extra actions</li> <li>Updated <code>ruff</code> options to reflect newer version options</li> <li>Fixed <code>ruff</code> bug in <code>ci.yaml</code> due to newer versions of <code>ruff</code></li> </ul>"},{"location":"changelog/#0115","title":"0.1.15","text":"<ul> <li>Fixed issues with publish Action</li> <li>Changed required Python version to 3.10 (in preparation for other changes)</li> </ul>"},{"location":"changelog/#0114","title":"0.1.14","text":"<ul> <li>Corrected misnumbered previous version</li> </ul>"},{"location":"changelog/#0113","title":"0.1.13","text":"<ul> <li>Updated GitHub Actions to newer versions</li> </ul>"},{"location":"changelog/#0112","title":"0.1.12","text":"<ul> <li>Removed merge.yml Actions (it was creating a <code>cookiecutter</code> error and is not   used by the package)</li> <li>Added Python 3.12 to pyproject.toml</li> </ul>"},{"location":"changelog/#0111","title":"0.1.11","text":"<ul> <li>Fixed intermittent bug with mkdocs finding the created module</li> </ul>"},{"location":"changelog/#0110","title":"0.1.10","text":"<ul> <li>Added more <code>ruff</code> rules and exclusions</li> <li>Fixed broken type annotation bug in <code>post_gen_project</code></li> </ul>"},{"location":"changelog/#019","title":"0.1.9","text":"<ul> <li>Streamlined GitHub Actions in the template and created repository</li> <li>Updated documentation to incorporate changes to Actions</li> <li>Changed extensions in <code>mkdocs.yml</code> to better reflect anticipated usage</li> <li>Added definition lists and admonitions to the template documentation to better   convey usage instructions</li> <li>Changed \"Stability\" badge to pull status directly from PyPI</li> </ul>"},{"location":"changelog/#v018","title":"v0.1.8","text":"<ul> <li>Fixed version detection regex in <code>release.yml</code></li> </ul>"},{"location":"changelog/#017","title":"0.1.7","text":"<ul> <li>Added Action (<code>release.yml</code>) to template and create repository which creates a   new GitHub release</li> <li>Updated and reorganized documentation</li> </ul>"},{"location":"changelog/#016","title":"0.1.6","text":"<ul> <li>Added dependabot to both the template and the created repository</li> <li>Added option to initialize and commit to GitHub (including building and   deploying initial documentation to GitPages)</li> <li>Added option to create a virtual environment with <code>pdm</code></li> </ul>"},{"location":"changelog/#015","title":"0.1.5","text":"<ul> <li>Changed badge colors to more closely match colors of the associated tool or brand</li> <li>Fixed capitalization in badges for consistency with different badge styles and   associated tool or brand's normal capitalization</li> <li>Fixed remaining bugs due to differences in <code>project_name</code>, <code>package_name</code>, and   <code>repo_name</code> in <code>cookiecutter</code> templating</li> </ul>"},{"location":"changelog/#014","title":"0.1.4","text":"<ul> <li>Added documentation for included GitHub Actions</li> <li>Fixed bugs in all Actions except <code>merge.yml</code>, which is untested</li> <li>Streamlined <code>README.md</code></li> </ul>"},{"location":"changelog/#013","title":"0.1.3","text":"<ul> <li>Fixed bug when cookiecutter.project_name has a space in it</li> </ul>"},{"location":"changelog/#012","title":"0.1.2","text":"<ul> <li>Added badges style option to questionnaire</li> <li>Added tutorial section regarding the questionnaire</li> <li>Reordered badges table</li> <li>Minor stylistic and formatting changes</li> </ul>"},{"location":"changelog/#011","title":"0.1.1","text":"<ul> <li>Added pre-commit to template and created repository</li> <li>Added manual GitHub Actions</li> <li>Added full tutorial user guide to documentation</li> <li>Minor stylistic and formatting changes</li> </ul>"},{"location":"changelog/#010","title":"0.1.0","text":"<ul> <li>Initial commit</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or   advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic   address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting any of the following people:</p> <ul> <li>Corey Rayburn Yung (coreyrayburnyung@gmail.com)</li> </ul> <p>All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p> <p>For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome and greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>Follow this basic process:</p> <ol> <li>Fork and clone the repositor.</li> <li>Create a new branch: <code>git checkout -b feature-or-bugfix-name</code>.</li> <li>Edit the code.</li> <li>If you added functionality or features, update the documentation accordingly.</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash main\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"contributing/#style-guidelines","title":"Style Guidelines","text":"<p>This package follows the Google Python Style Guide with two notable exceptions:</p> <ol> <li> <p>It always adds spaces around \"=\". This not only violates the Google guide, it violates PEP8, the foundational Python style guide from which all other resources are derived. I defy this strong, long-standign norm because I find it more readable. My brain and eyes have trouble seeing two separate objects when an equal sign is in the middle. I imagine that I am not alone in this accessibility issue. Further, as PEP8 itself notes, required spaces around equal signs are becoming increasing common with type annotations becoming part of best practices (and, as a result, signatures to classes, functions, and methods regularly include spaces around the equal signs). I realize that this will seem alien to many coders, but it is far easier on my eyes.</p> </li> <li> <p>I use some so-called \"power features\", primarily dunder methods, to make my interfaces easier to access and use. This is disfavored in the Google Python Style Guide because such code is often more difficult for others to read. To address that concern, I try to document and comment as to what the code is doing whenever I used any of the \"power features\" of Python.</p> </li> </ol>"},{"location":"license/","title":"License","text":"<p>Apache Software License 2.0</p> <p>Copyright \u00a9 2023, Corey Rayburn Yung</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at</p> <p>http://www.apache.org/licenses/LICENSE-2.0</p> <p>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.</p>"},{"location":"tutorial/","title":"Tutorial","text":""},{"location":"tutorial/#requirements","title":"Requirements","text":"<p>To use <code>snickerdoodle</code> and the repository that it creates, you just need:</p> <ul> <li><code>python</code> 3.9 or later</li> <li><code>git</code></li> <li><code>cookiecutter</code> or   <code>cruft</code></li> <li><code>uv</code></li> <li>A GitHub account</li> </ul> <p>Tip</p> <p>To take advantage of the automatic initial commit to GitHub, you should also store your Git credentials on your computer.</p>"},{"location":"tutorial/#create-remote-repository","title":"Create Remote Repository","text":"<p>Go to your GitHub Repositories page and click \"+\". The name of the new repository must be the same as the \"repo_name\" you will use in answering the <code>cookiecutter</code> questionnaire.</p>"},{"location":"tutorial/#create-local-repository","title":"Create Local Repository","text":"<p>In the parent folder of where you want your new repository, you can use <code>cookiecutter</code> (or <code>cruft</code> or <code>cookieninja</code>) to access the <code>snickerdoodle</code> template either directly from GitHub or by cloning it on your computer.</p> from GitHubfrom local source <pre><code>cookiecutter gh:WithPrecedent/snickerdoodle\n</code></pre> <pre><code># Go to folder where your cookiecutter templates are stored locally.\ngit clone git@github.com:WithPrecedent/snickerdoodle.git\n# Go to folder where your code repostiories are stored locally.\ncookiecutter snickerdoodle\n</code></pre>"},{"location":"tutorial/#answer-questionnaire","title":"Answer Questionnaire","text":"<p>As with any <code>cookiecutter</code>, project generation requires you to input information in what is referred to as the \"questionnaire.\" <code>snickerdoodle</code> attempts to make this process quick, easy, and painless. The default options, often created from your previous answers, are sensible so that you can just hit \"return\" in reponse to many requests. Or, if you prefer, as explained in the advanced guide, you can create a configuration file with many or all of your answers.</p> <p>These are the variable for which information will be requested, how your answers will be used, the default value (if any), and any limitations on your answer:</p> Variable Use Default Limitations <code>project_name</code> project title on README and docs None alphanumeric <code>package_name</code> project title on PyPI.org <code>project_name</code> with spaces and underscores changed to dashes alphanumeric with no spaces or underscores <code>repo_name</code> project title on GitHub <code>project_name</code> with spaces and dashes changed to underscores alphanumeric with no spaces or dashes <code>author_name</code> in <code>pyproject.toml</code> and docs None alphanumeric <code>author_email</code> in <code>pyproject.toml</code> None alphanumeric <code>github_user</code> to infer URL and in <code>pyproject.toml</code> None alphanumeric <code>description</code> to infer URL and in <code>pyproject.toml</code> None alphanumeric <code>version</code> in <code>__init__.py</code> for project \"0.1.0\" any valid version format <code>url</code> in <code>pyproject.toml</code> formed from <code>github_user</code> and <code>repo_name</code> any valid GitHub url <code>license</code> content of the constructed LICENSE file and in <code>pyproject.toml</code> Apache 2.0 Apache 2.0, BSD, ISC, GNU General Public v3, MIT, Other <code>badge_style</code> badges in README and docs , , , ,  <code>commit_to_github</code> whether to make an initial commit to GitHub \"n\" (no commit) Must have GitHub credentials stored <code>create_virtual_environment</code> whether to create a virtual environment in \".venv\" folder \"n\" (no environment created) Must have <code>uv</code> installed"},{"location":"tutorial/#connect-remote-and-local-repositories","title":"Connect Remote and Local Repositories","text":"<p>Warning</p> <p>You do not need to complete this step if you opted to <code>commit_to_github</code> in the questionnaire.</p> <p>Enter the folder that you just created (which should be the <code>repo_name</code>) and initialize git as followa:</p> <pre><code># If your shell does not use \"cd\" to change directory, substitute the\n# appropriate command.\ncd {repo_name}\ngit init\ngit add .\n# You can change the message in the last command to whatever you like\ngit commit -m  \"Initial commit\"\ngit remote add origin {url of your new repository}.git\n# Depending on your default branch name, the last parameter might be \"master\"\n# or whatever you have set it to. If you use an IDE that has stored your\n# GitHub credentials, you might find it easier to use the IDE for pushing your\n# repository instead of the command line.\ngit push -u origin main\n</code></pre> <p>Your first commit with the new repository should now be visible on GitHub.</p>"},{"location":"tutorial/#create-virtual-environment","title":"Create Virtual Environment","text":"<p>Warning</p> <p>You do not need to complete this step if you opted to <code>create_virtual_environment</code> in the questionnaire.</p> <p>To create an environment with all of your dependencies (including development dependencies), enter the following in the repository folder.</p> <pre><code>uv venv\nuv sync\n</code></pre> <p>Any time you update your dependencies, you should rerun <code>uv sync</code>.</p> <p>If you need to activate your environment outside of an IDE, use these commands:</p> <pre><code>source .venv/bin/activate  # For Linux and MacOS\n.venv\\Scripts\\activate     # For Windows\n</code></pre>"},{"location":"tutorial/#deploy-documentation","title":"Deploy Documentation","text":"<p>Warning</p> <p>You do not need to complete this step if you opted to <code>commit_to_github</code> and <code>create_virtual_environment</code> in the questionnaire.</p> <p>Unlike <code>poetry</code>, <code>uv</code> does not use a shell. Instead, after you have created a virtual environment, enter the following commands to deploy your documentation.</p> <pre><code>uv run mkdocs build\n# If you use an IDE that has stored your GitHub credentials, you might find\n# it easier to use the IDE for deploying your docs instead of the command\n# line.\nuv run mkdocs gh-deploy --force --clean\n</code></pre> <p>It's essential to run these commands once so that the documentation branch is created. Afterwards, the documentation for the repository will be automatically updated with every push to GitHub.</p>"}]}